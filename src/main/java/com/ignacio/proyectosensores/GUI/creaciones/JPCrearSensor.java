package com.ignacio.proyectosensores.GUI.creaciones;

import com.ignacio.proyectosensores.BLL.Maquina;
import com.ignacio.proyectosensores.BLL.Sensor;
import com.ignacio.proyectosensores.BLL.TipoSensor;
import com.ignacio.proyectosensores.BLL.TipoUnidad;
import com.ignacio.proyectosensores.DAL.CodigoRepetidoException;
import com.ignacio.proyectosensores.DAL.RestriccionException;
import com.ignacio.proyectosensores.DAL.SinBaseDatosException;
import com.ignacio.proyectosensores.GUI.JDModificarSensor;
import com.ignacio.proyectosensores.Main;
import java.awt.Component;
import java.awt.HeadlessException;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.AbstractCellEditor;
import javax.swing.JButton;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import org.jdesktop.swingx.autocomplete.AutoCompleteDecorator;
import org.jdesktop.swingx.combobox.ListComboBoxModel;

/**
 *
 * @author ignacio
 */
public class JPCrearSensor extends javax.swing.JPanel {

	private final Sensor s = new Sensor();

	/**
	 * Creates new form JPCrearSensor
	 */
	public JPCrearSensor() {
		initComponents();
		rellenoComboBox();
		rellenoTabla();
	}

	void rellenoTabla() throws HeadlessException {
		try {
			List<Sensor> ls = Sensor.findAll();
			t_vista.setModel(new SensorTableModel(ls));
			t_vista.getColumnModel().getColumn(1).setCellRenderer(
					new MaquinaCellRenderer());
			t_vista.getColumnModel().getColumn(1).setCellEditor(
					new MaquinaCellEditor());
			t_vista.repaint();

		} catch (SinBaseDatosException ex) {
			JOptionPane.showMessageDialog(
					this, "Error al conectar a la base de datos");
			Logger.getLogger(JPCrearSensor.class.getName()).log(Level.SEVERE, null, ex);
		}
	}

	private void rellenoComboBox() {
		List<Maquina> maquinas;
		List<TipoSensor> tipoSensores;
		List<TipoUnidad> tipoUnidades;
		try {
			maquinas = Maquina.findAll();
			tipoSensores = TipoSensor.findAll();
			tipoUnidades = TipoUnidad.findAll();
			cb_maquina.setModel(new ListComboBoxModel<>(maquinas));
			cb_sensor.setModel(new ListComboBoxModel<>(tipoSensores));
			cb_unidad.setModel(new ListComboBoxModel<>(tipoUnidades));
			AutoCompleteDecorator.decorate(cb_maquina);
			AutoCompleteDecorator.decorate(cb_sensor);
			AutoCompleteDecorator.decorate(cb_unidad);
		} catch (SinBaseDatosException ex) {
			Logger.getLogger(JPCrearSensor.class.getName()).log(
					Level.SEVERE, null, ex);
		}
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        escala = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        tf_nombre = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        tf_escala = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        rb_positivo = new javax.swing.JRadioButton();
        rb_negativo = new javax.swing.JRadioButton();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        cb_unidad = new javax.swing.JComboBox<TipoUnidad>();
        cb_sensor = new javax.swing.JComboBox<TipoSensor>();
        cb_maquina = new javax.swing.JComboBox<Maquina>();
        b_guardar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        t_vista = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        ta_descripcion = new javax.swing.JTextArea();

        setMinimumSize(new java.awt.Dimension(500, 500));
        setPreferredSize(new java.awt.Dimension(500, 500));

        jLabel1.setText("Nombre:");

        tf_nombre.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                tf_nombreKeyReleased(evt);
            }
        });

        jLabel2.setText("Escala:");

        tf_escala.setToolTipText("Por ejemplo 2*x+1, donde cada oparacion debe dejarse expresada explicitamente");

        jLabel3.setText("Descripci√≥n:");

        jLabel4.setText("Tipo de escala:");

        escala.add(rb_positivo);
        rb_positivo.setSelected(true);
        rb_positivo.setText("Positiva");

        escala.add(rb_negativo);
        rb_negativo.setText("Negativa");

        jLabel5.setText("Tipo de unidad:");

        jLabel6.setText("Tipo de sensor:");

        jLabel7.setText("Maquina:");

        b_guardar.setText("Guardar");
        b_guardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_guardarActionPerformed(evt);
            }
        });

        t_vista.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        t_vista.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                t_vistaKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(t_vista);

        ta_descripcion.setColumns(20);
        ta_descripcion.setRows(5);
        jScrollPane2.setViewportView(ta_descripcion);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel7)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel2)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(cb_sensor, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(cb_unidad, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(tf_nombre, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(tf_escala, javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(cb_maquina, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addComponent(rb_positivo)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(rb_negativo)
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.Alignment.LEADING)))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 488, Short.MAX_VALUE)
                            .addComponent(b_guardar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tf_nombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(tf_escala, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel3)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(rb_negativo)
                    .addComponent(jLabel4)
                    .addComponent(rb_positivo))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel5)
                    .addComponent(cb_unidad, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel6)
                    .addComponent(cb_sensor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(cb_maquina, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel7))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_guardar)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 173, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void b_guardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_guardarActionPerformed
		s.setNombre(tf_nombre.getText());
		s.setEscala(tf_escala.getText());
		s.setEscalaPositiva(rb_positivo.isSelected());
		s.setDetalle(ta_descripcion.getText());
		s.setMaquina((Maquina) cb_maquina.getSelectedItem());
		s.setTipoSensor((TipoSensor) cb_sensor.getSelectedItem());
		s.setTipoUnidad((TipoUnidad) cb_unidad.getSelectedItem());
		try {
			s.save();
			JOptionPane.showMessageDialog(this, "Guardado exitosamente");
			int sel = JOptionPane.showConfirmDialog(this, "Desea agregar una advertencia?");
			if (sel == JOptionPane.OK_OPTION) {
				JDCrearAdvertencia a = new JDCrearAdvertencia(
						Main.instancia, true, s.getId());
				a.setVisible(true);
			}
			rellenoTabla();
		} catch (SinBaseDatosException ex) {
			JOptionPane.showMessageDialog(this, "Sin base de datos");
			Logger.getLogger(JPCrearSensor.class.getName()).log(
					Level.SEVERE, null, ex);
		} catch (CodigoRepetidoException ex) {
			JOptionPane.showMessageDialog(
					this, "Problemas al guardar el sensor");
			Logger.getLogger(JPCrearSensor.class.getName()).log(
					Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_b_guardarActionPerformed

    private void tf_nombreKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_tf_nombreKeyReleased
		final String text = tf_nombre.getText();
		try {
			List<Sensor> l = Sensor.findLike(text);
			if (l.size() > 0) {
				((SensorTableModel) t_vista.getModel()).setLista(l);
			}
		} catch (SinBaseDatosException ex) {
			Logger.getLogger(JPCrearSensor.class.getName()).log(
					Level.SEVERE, null, ex);
		}
    }//GEN-LAST:event_tf_nombreKeyReleased

    private void t_vistaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_t_vistaKeyReleased
		if (evt.getKeyCode() == KeyEvent.VK_DELETE) {
			int op = JOptionPane.showConfirmDialog(
					this,
					"¬ø Desea eliminar el registro ?","Confirmaci√≥n", 
					JOptionPane.OK_CANCEL_OPTION);
			if (op == JOptionPane.OK_OPTION) {
				int r = t_vista.getSelectedRow();
				Sensor l
						= (Sensor) t_vista.getModel().getValueAt(r, 0);
				try {
					l.delete();
					rellenoTabla();
				} catch (SinBaseDatosException ex) {
					Logger.getLogger(JPCrearLugar.class.getName()).log(
							Level.SEVERE, null, ex);
				} catch (RestriccionException ex) {
					JOptionPane.showMessageDialog(
							this,
							"Para eliminar este registro es necesario "
							+ "borrar sus dependencias",
							"Advertencia",
							JOptionPane.WARNING_MESSAGE);
				}
			}
		}
    }//GEN-LAST:event_t_vistaKeyReleased


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton b_guardar;
    private javax.swing.JComboBox<Maquina> cb_maquina;
    private javax.swing.JComboBox<TipoSensor> cb_sensor;
    private javax.swing.JComboBox<TipoUnidad> cb_unidad;
    private javax.swing.ButtonGroup escala;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JRadioButton rb_negativo;
    private javax.swing.JRadioButton rb_positivo;
    private javax.swing.JTable t_vista;
    private javax.swing.JTextArea ta_descripcion;
    private javax.swing.JTextField tf_escala;
    private javax.swing.JTextField tf_nombre;
    // End of variables declaration//GEN-END:variables

	private final JPCrearSensor instancia = this;

	private static class MaquinaCellRenderer implements TableCellRenderer {

		@Override
		public Component getTableCellRendererComponent(JTable tabla,
				Object valor, boolean isSelected, boolean hasFocus,
				int row, int column) {
			JButton b = new JButton("Editar");
			return b;
		}
	}

	private static class MaquinaCellEditor
			extends AbstractCellEditor
			implements TableCellEditor {

		@Override
		public Object getCellEditorValue() {
			return true;
		}

		@Override
		public Component getTableCellEditorComponent(final JTable tabla,
				Object valor, boolean isSelected, final int row,
				final int column) {
			JButton b = new JButton("Editar");
			final JPCrearSensor panel = ((JPCrearSensor) tabla.getParent().getParent().getParent());
			final Sensor s = (Sensor) tabla.getModel().getValueAt(row, column);
			s.findDependencias();
			b.addActionListener(new ActionListener() {

				@Override
				public void actionPerformed(ActionEvent e) {
					JDModificarSensor d = new JDModificarSensor(
							Main.instancia, true, s);
					d.setVisible(true);
					panel.rellenoTabla();
				}
			});
			return b;
		}
	}

	private class SensorTableModel extends AbstractTableModel {

		String columnas[] = {"Nombre", "Editar"};
		List<Sensor> l;

		public SensorTableModel(List<Sensor> l) {
			this.l = l;
		}

		public void setLista(List<Sensor> l) {
			this.l = l;
			fireTableDataChanged();
		}

		@Override
		public int getRowCount() {
			return l.size();
		}

		@Override
		public int getColumnCount() {
			return columnas.length;
		}

		@Override
		public String getColumnName(int column) {
			return columnas[column];
		}

		@Override
		public Object getValueAt(int row, int column) {
			return l.get(row);
		}

		@Override
		public boolean isCellEditable(int rowIndex, int columnIndex) {
			return columnIndex == 1;
		}

	}
}
